package monitor

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"os"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var bot *tgbotapi.BotAPI
var users = make(map[string]int64)         // username -> chatID (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
var pendingCodes = make(map[string]string) // code -> username (–æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)

// InitBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram-–±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
func InitBot(token string) {
	var err error
	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %v", err)
	}

	log.Printf("‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	loadUsers() // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	updates := bot.GetUpdatesChan(tgbotapi.NewUpdate(0))

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		for update := range updates {
			handleUpdate(update)
		}
	}()
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
func handleUpdate(update tgbotapi.Update) {
	if update.Message == nil {
		return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-—Å–æ–æ–±—â–µ–Ω–∏—è
	}

	username := update.Message.From.UserName
	chatID := update.Message.Chat.ID
	text := update.Message.Text

	if text == "/start" {
		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø—Ä–∏–≤—è–∑–∫–∏
		code := generateCode()

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		pendingCodes[code] = username
		users[username] = chatID // –°–æ—Ö—Ä–∞–Ω—è–µ–º chatID
		saveUsers()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		msg := tgbotapi.NewMessage(chatID, "üîê –í–∞—à –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏: "+code)
		bot.Send(msg)
	}

}

// generateCode –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
func generateCode() string {
	rand.Seed(time.Now().UnixNano())
	return strconv.Itoa(100000 + rand.Intn(900000))
}

// loadUsers –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ users.json
func loadUsers() {
	data, err := os.ReadFile("users.json")
	if err == nil {
		json.Unmarshal(data, &users)
	}
}

// saveUsers —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª users.json
func saveUsers() {
	data, _ := json.MarshalIndent(users, "", "  ")
	os.WriteFile("users.json", data, 0644)
}

// GetChatIDs –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö chatID –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func GetChatIDs() []int64 {
	ids := []int64{}
	for _, id := range users {
		ids = append(ids, id)
	}
	return ids
}

// SendAlertTo –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–∞—Å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func SendAlertTo(chatID int64, pid int32, name string, cpu float64, mem float32) {
	msg := fmt.Sprintf("[‚ö†] PID: %d\n–ò–º—è: %s\nCPU: %.2f%%\nRAM: %.2f%%", pid, name, cpu, mem)
	bot.Send(tgbotapi.NewMessage(chatID, msg))
}

// WaitForCodeInput() –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–¥ –∏ —Å–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Å
func WaitForCodeInput() (string, int64) {
	var input string
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ Telegram: ")
	fmt.Scanln(&input)

	for username, chatID := range users {
		if code, ok := pendingCodes[input]; ok && code == username {
			fmt.Println("–ü—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞.")
			delete(pendingCodes, input)
			return username, chatID
		}
	}

	fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
	os.Exit(1)
	return "", 0
}
